#==============================================================================
# Sod Riemman Problem: GRHydro_InitData
#==============================================================================

#------------------------------------------------------------------------------
# Cactus parameters:
#------------------------------------------------------------------------------
Cactus::cctk_run_title = "Sod Problem"
Cactus::cctk_full_warnings         = "yes"

Cactus::terminate       = "time"
Cactus::cctk_final_time = 0.4   #defines the final time of the simulation


#------------------------------------------------------------------------------
# Activate all necessary thorns:
#------------------------------------------------------------------------------

#This defines which modules we want to use and load into memory
ActiveThorns = "Boundary CartGrid3D CoordBase Fortran InitBase IOUtil LocalReduce SymBase Time"
ActiveThorns = "AEILocalInterp LocalInterp"
ActiveThorns = "MoL Slab SpaceMask"
ActiveThorns = "Carpet CarpetInterp CarpetIOASCII CarpetIOHDF5 CarpetIOScalar CarpetLib CarpetIOBasic CarpetReduce CarpetSlab LoopControl"  #Carpet uses the adaptive mesh refinement algorithm
ActiveThorns = "NaNChecker"
ActiveThorns = "ADMbase ADMcoupling ADMmacros CoordGauge StaticConformal"
ActiveThorns = "Constants TmunuBase HydroBase "
ActiveThorns = "EOS_Omni"
ActiveThorns = "GRHydro GRHydro_InitData"  #we use GRHydro and not IllinoisGRMHD
ActiveThorns = "HDF5"
ActiveThorns = "SystemStatistics"

#------------------------------------------------------------------------------
# Diagnostic parameters:
#------------------------------------------------------------------------------

Carpet::storage_verbose   = "no"
Carpet::verbose           = "no"
Carpet::veryverbose       = "no"

CarpetLib::print_memstats_every     = 1024
CarpetLib::memstat_file    = "carpetlib-memory-statistics.asc"

CarpetReduce::verbose    = "no"

#------------------------------------------------------------------------------
# Utility parameters:
#------------------------------------------------------------------------------

NaNChecker::check_every   =  1   #check every iteration
NaNChecker::check_vars = "
            ADMBase::curv 
            ADMBase::metric 
            ADMBase::lapse 
            ADMBase::shift 
            HydroBase::Bvec
            HydroBase::rho 
            HydroBase::eps 
            HydroBase::press 
            HydroBase::vel
            HydroBase::w_lorentz
"
NaNChecker::action_if_found   =  "terminate"

#this terminates the simulation if any NaN is found in the calculations

#------------------------------------------------------------------------------
# Run parameters:
#------------------------------------------------------------------------------

#------
# Grid:
#------

Time::dtfac = 0.8    #Time module, here dtfac is the Courant Factor and it's set to 0.8

#MoL is the Method of Lines, this can be used for Initial Value Problems(IVP)
#In a flux conservative form equation, what MoL does is approximate the derivative 
#on the flux and compute the time derivative of u by integrating the following ODE

#d_t(u)_j = -(f_{j+1/2} - f_{j-1/2})/Delta_x

#To integrate you can use the Runge-Kutta methods, 
#this is a 2nd-order Runge-Kutta 
MoL::ODE_Method             = "rk2"
MoL::MoL_Intermediate_Steps = 2

#If you want to use a 4th-order Runge-Kutta
#MoL::ODE_Method             = "rk4"
#MoL::MoL_Intermediate_Steps = 4
#MoL::MoL_Num_Scratch_Levels = 1

CartGrid3D::type         = "coordbase"
CartGrid3D::domain       = "full"
CartGrid3D::avoid_origin = "no"

CoordBase::domainsize       = "minmax"
CoordBase::spacing          = "gridspacing"

#Here you set the domain extent, Since nothing is happening in y and z (1d)
#we decide not to waste computing power and just maximize the x extent (no waves propagating on y,z)
CoordBase::xmin = -0.5
CoordBase::ymin = -0.025
CoordBase::zmin = -0.025
CoordBase::xmax =  0.5
CoordBase::ymax =  0.025
CoordBase::zmax =  0.025
CoordBase::dx   =  0.0025  # dx or ncells_x
CoordBase::dy   =  0.005  # dy or ncells_y, resolution on y and z is not important
CoordBase::dz   =  0.005  # dz or ncells_z

#N_points = (ymax - ymin)/dy must be an integer!

CoordBase::boundary_size_x_lower        = 3
CoordBase::boundary_size_y_lower        = 3
CoordBase::boundary_size_z_lower        = 3
CoordBase::boundary_size_x_upper        = 3
CoordBase::boundary_size_y_upper        = 3
CoordBase::boundary_size_z_upper        = 3

Driver::ghost_size                  = 3
GRHydro::GRHydro_stencil            = 3

# General Carpet parameters:
Carpet::domain_from_coordbase    = "yes"

CarpetLib::poison_new_memory         = "yes"
CarpetLib::poison_value              = 114

#------
# MODEL:
#------

#shocktube is a riemann problem, we will use the Sod case

HydroBase::initial_hydro                = "shocktube"
HydroBase::initial_Bvec 		= "shocktube"
GRHydro_InitData::shocktube_type        = "xshock"
GRHydro_InitData::shock_case            = "Sod"


ADMBase::metric_type             = "physical"
ADMBase::initial_data            = "Cartesian Minkowski"  #here we are in flat spacetime
ADMBase::initial_lapse           = "one"
ADMBase::initial_shift           = "zero"
ADMBase::initial_dtlapse         = "none"
ADMBase::initial_dtshift         = "none"

#this is for the equation of state
EOS_Omni::poly_K     = 100.0
EOS_Omni::poly_gamma = 1.66666666666666666666  ##This is 5/3=1.6666 because we are using ideal gas
EOS_Omni::gl_K       = 100.0
EOS_Omni::gl_gamma   = 1.66666666666666666666  ##This is 5/3
GRHydro::initial_Gamma = 1.66666666666666666666  ##This is 5/3

#----------
# Numerics:
#----------
HydroBase::timelevels            = 2
SpaceMask::use_mask      = "yes"

#-----------
# Evolution:
#-----------

HydroBase::evolution_method      = "GRHydro"
HydroBase::Bvec_evolution_method = "GRHydro"

GRHydro::method_type               = "RSA FV"
GRHydro::recon_method              = "tvd"
GRHydro::tvd_limiter               = "minmod" #minmod for tvd, we've seen this
GRHydro::recon_vars                = "primitive"
GRHydro::riemann_solver            = "HLLE"   #the simplest riemann solver
GRHydro::bound                     = "flat"   #the points outside the boundary (non existent) have the same value as the last points
GRHydro::GRHydro_eos_type          = "General"
GRHydro::GRHydro_eos_table         = "Ideal_Fluid" # P = eps^(Gamma - 1) check this

#------------------------------------------------------------------------------
# Output:
#------------------------------------------------------------------------------

IO::out_dir = Sod_1d_400
IO::out_fileinfo           = "none"

IOBasic::outInfo_every = 1    #writing output
IOBasic::outInfo_reductions = "maximum"   #here we show only the maximum value to terminal
IOBasic::outInfo_vars  = "
 Carpet::physical_time_per_hour
 HydroBase::rho
 HydroBase::press
 SystemStatistics::maxrss_mb
"

IOASCII::out0D_every     = 200
IOASCII::out0D_vars      = "
 Carpet::timing   		#a few informations, we print that every 200 iterations
"

#HDF5 produces file in binary format to save space
CarpetIOHDF5::out1D_every     = 10   #we plot the 1d variables every 10 iterations
CarpetIOHDF5::out1D_vars      = "
 GRHydro::dens   #density
 GRHydro::scon
 GRHydro::tau
 HydroBase::eps  #energy density of the fluid
 HydroBase::press
 HydroBase::rho
 HydroBase::vel
 HydroBase::w_lorentz
"

CarpetIOHDF5::open_one_input_file_at_a_time  = "yes"

CarpetIOHDF5::out2D_every                    = -1     #this disables the output (we only care about 1D data)
CarpetIOHDF5::out2D_xy                       = "yes"
CarpetIOHDF5::out2D_xz                       = "no"
CarpetIOHDF5::out2D_yz                       = "no"
CarpetIOHDF5::out2D_vars      = "
  GRHydro::dens
  GRHydro::scon
  GRHydro::tau
  HydroBase::eps
  HydroBase::press
  HydroBase::rho
  HydroBase::vel
  HydroBase::w_lorentz
"

CarpetIOHDF5::out3D_every = -1		#same thing here
CarpetIOHDF5::out3D_vars  = "
 HydroBase::eps
 HydroBase::press
 HydroBase::rho
 HydroBase::vel
 HydroBase::w_lorentz
"
